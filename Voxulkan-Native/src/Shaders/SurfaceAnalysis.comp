#version 450

layout(rg8ui, set = 0, binding = 0) uniform restrict readonly uimage3D colorMap;
layout(r32ui, set = 0, binding = 1) uniform restrict writeonly uimage3D indexMap;
layout(set = 0, binding = 2) buffer restrict writeonly cellBuffer
{
	uvec2 cells[];
};
layout(set = 0, binding = 3) buffer restrict writeonly attributes
{
	uint cellCount;
	uint vertexCount;
	uint indexCount;
};

layout(push_constant) uniform PushConstants
{
	uvec3 viewOffset;
	uvec3 viewRange;
};

uint idxCounts[256] = uint[]
(
	0 ,3 ,3 ,6 ,3 ,6 ,6 ,9 ,3 ,6 ,6 ,9 ,6 ,9 ,9 ,6 ,
	3 ,6 ,6 ,9 ,6 ,9 ,9 ,12,6 ,9 ,9 ,12,9 ,12,12,9 ,
	3 ,6 ,6 ,9 ,6 ,9 ,9 ,12,6 ,9 ,9 ,12,9 ,12,12,9 ,
	6 ,9 ,9 ,6 ,9 ,12,12,9 ,9 ,12,12,9 ,12,15,15,6 ,
	3 ,6 ,6 ,9 ,6 ,9 ,9 ,12,6 ,9 ,9 ,12,9 ,12,12,9 ,
	6 ,9 ,9 ,12,9 ,12,12,15,9 ,12,12,15,12,15,15,12,
	6 ,9 ,9 ,12,9 ,12,6 ,9 ,9 ,12,12,15,12,15,9 ,6 ,
	9 ,12,12,9 ,12,15,9 ,6 ,12,15,15,12,15,6 ,12,3 ,
	3 ,6 ,6 ,9 ,6 ,9 ,9 ,12,6 ,9 ,9 ,12,9 ,12,12,9 ,
	6 ,9 ,9 ,12,9 ,12,12,15,9 ,6 ,12,9 ,12,9 ,15,6 ,
	6 ,9 ,9 ,12,9 ,12,12,15,9 ,12,12,15,12,15,15,12,
	9 ,12,12,9 ,12,15,15,12,12,9 ,15,6 ,15,12,6 ,3 ,
	6 ,9 ,9 ,12,9 ,12,12,15,9 ,12,12,15,6 ,9 ,9 ,6 ,
	9 ,12,12,15,12,15,15,6 ,12,9 ,15,12,9 ,6 ,12,3 ,
	9 ,12,12,15,12,15,9 ,12,12,15,15,6 ,9 ,12,6 ,3 ,
	6 ,9 ,9 ,6 ,9 ,12,6 ,3 ,9 ,6 ,12,3 ,6 ,3 ,3 ,0 
);

uint vertCounts[256] = uint[]
(
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 ,
	0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,
	1 ,2 ,2 ,1 ,1 ,2 ,2 ,1 ,2 ,1 ,3 ,0 ,2 ,1 ,3 ,0 
);

uint cornerFlags[256] = uint[]
(
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 ,
	0 ,7 ,1 ,6 ,0 ,7 ,1 ,6 ,2 ,5 ,3 ,4 ,2 ,5 ,3 ,4 ,
	4 ,3 ,5 ,2 ,4 ,3 ,5 ,2 ,6 ,1 ,7 ,0 ,6 ,1 ,7 ,0 
);

#define ISO 128

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
void main()
{
	if(gl_GlobalInvocationID.x > viewRange.x ||
	gl_GlobalInvocationID.y > viewRange.y ||
	gl_GlobalInvocationID.z > viewRange.z) return;

	ivec3 cell = ivec3(gl_GlobalInvocationID.xyz + viewOffset.xyz);
	uint cubeFlag = 0;
	if (imageLoad(colorMap, cell).r < ISO) cubeFlag |= 1;
	
	if(gl_GlobalInvocationID.z == viewRange.z) cubeFlag |= (cubeFlag & 1) << 1;
	else if (imageLoad(colorMap, cell+ivec3(0,0,1)).r < ISO) cubeFlag |= 2;
	
	if (imageLoad(colorMap, cell+ivec3(1,0,1)).r < ISO) cubeFlag |= 4;

	if(gl_GlobalInvocationID.x == viewRange.x) cubeFlag |= (cubeFlag & 1) << 3;
	else if (imageLoad(colorMap, cell+ivec3(1,0,0)).r < ISO) cubeFlag |= 8;
	
	if(gl_GlobalInvocationID.y == viewRange.y) cubeFlag |= (cubeFlag & 1) << 4;
	else if (imageLoad(colorMap, cell+ivec3(0,1,0)).r < ISO) cubeFlag |= 16;

	if (imageLoad(colorMap, cell+ivec3(0,1,1)).r < ISO) cubeFlag |= 32;
	if (imageLoad(colorMap, cell+ivec3(1,1,1)).r < ISO) cubeFlag |= 64;
	if (imageLoad(colorMap, cell+ivec3(1,1,0)).r < ISO) cubeFlag |= 128;

	if(cubeFlag != 0 && cubeFlag != 0xFF)
	{
		uint idx = 0xFFFFFFFF;
		uint vCount = vertCounts[cubeFlag];
		if(gl_GlobalInvocationID.x == viewRange.x || 
		gl_GlobalInvocationID.y == viewRange.y ||
		gl_GlobalInvocationID.z == viewRange.z)
		{
			if(vCount==0) return;
		}
		else
		{
			idx = atomicAdd(indexCount, idxCounts[cubeFlag]);
		}
		cells[atomicAdd(cellCount, 1)] = uvec2(gl_GlobalInvocationID.x |
			(gl_GlobalInvocationID.y << 8) |
			(gl_GlobalInvocationID.z << 16) |
			(cubeFlag << 24), idx);

		if(vCount > 0)
		{
		imageStore(indexMap,
			ivec3(gl_GlobalInvocationID.xyz),
			uvec4(
			(atomicAdd(vertexCount, vCount) << 3) |
			cornerFlags[cubeFlag], 0, 0, 0));
		}
	}
}