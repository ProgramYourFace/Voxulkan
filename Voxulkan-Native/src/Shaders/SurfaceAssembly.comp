#version 450

layout(rgba8, set = 0, binding = 0) uniform restrict readonly image3D colorMap;
layout(r32ui, set = 0, binding = 1) uniform restrict readonly uimage3D indexMap;
layout(set = 0, binding = 2) buffer restrict readonly cellBuffer
{
	uvec2 cells[];
};

struct Vertex
{
vec3 pos;
uint nrm_idx;
};
layout(set = 0, binding = 3) buffer restrict writeonly vertexBuffer
{
	Vertex verts[];
};
layout(set = 0, binding = 4) buffer restrict writeonly indexBuffer
{
	uint idxs[];
};
layout(set = 0, binding = 5) buffer restrict readonly attributes
{
	uint cellCount;
	uint vertexCount;
	uint indexCount;
};

layout(push_constant) uniform PushConstants
{
	uvec3 viewOffset;
	uvec3 viewRange;
};

uvec3 cornerIMap[8] = uvec3[](
	uvec3(0,0,0),
	uvec3(0,1,1),
	uvec3(0,0,1),
	uvec3(0,1,2),
	uvec3(0,0,0),
	uvec3(0,1,1),
	uvec3(0,0,1),
	uvec3(0,1,2));

uvec2 edgeMap[12] = uvec2[](
	uvec2(0,0),//0
	uvec2(1,1),//1
	uvec2(2,0),//2
	uvec2(0,1),//3

	uvec2(3,0),//4
	uvec2(4,1),//5
	uvec2(5,0),//6
	uvec2(3,1),//7
	
	uvec2(0,2),//8
	uvec2(1,2),//9
	uvec2(6,2),//10
	uvec2(2,2) //11
);

int triTable[256][16] = int[][](
int[](-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0),
int[]( 0, 8, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 0, 1, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 1, 8, 3, 9, 8, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 0, 8, 3, 1, 2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 9, 2,10, 0, 2, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 2, 8, 3, 2,10, 8,10, 9, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 3,11, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 0,11, 2, 8,11, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 9, 0, 2, 3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1,11, 2, 1, 9,11, 9, 8,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 3,10, 1,11,10, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0,10, 1, 0, 8,10, 8,11,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 3, 9, 0, 3,11, 9,11,10, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 8,10,10, 8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 4, 3, 0, 7, 3, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 1, 9, 8, 4, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 1, 9, 4, 7, 1, 7, 3, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2,10, 8, 4, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 3, 4, 7, 3, 0, 4, 1, 2,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 2,10, 9, 0, 2, 8, 4, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 2,10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4,-1,-1,-1,12),
int[]( 8, 4, 7, 3,11, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[](11, 4, 7,11, 2, 4, 2, 0, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 0, 1, 8, 4, 7, 2, 3,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 4, 7,11, 9, 4,11, 9,11, 2, 9, 2, 1,-1,-1,-1,12),
int[]( 3,10, 1, 3,11,10, 7, 8, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 1,11,10, 1, 4,11, 1, 0, 4, 7,11, 4,-1,-1,-1,12),
int[]( 4, 7, 8, 9, 0,11, 9,11,10,11, 0, 3,-1,-1,-1,12),
int[]( 4, 7,11, 4,11, 9, 9,11,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 5, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 9, 5, 4, 0, 8, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 5, 4, 1, 5, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 8, 5, 4, 8, 3, 5, 3, 1, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2,10, 9, 5, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 3, 0, 8, 1, 2,10, 4, 9, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 5, 2,10, 5, 4, 2, 4, 0, 2,-1,-1,-1,-1,-1,-1, 9),
int[]( 2,10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8,-1,-1,-1,12),
int[]( 9, 5, 4, 2, 3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0,11, 2, 0, 8,11, 4, 9, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 5, 4, 0, 1, 5, 2, 3,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 2, 1, 5, 2, 5, 8, 2, 8,11, 4, 8, 5,-1,-1,-1,12),
int[](10, 3,11,10, 1, 3, 9, 5, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 4, 9, 5, 0, 8, 1, 8,10, 1, 8,11,10,-1,-1,-1,12),
int[]( 5, 4, 0, 5, 0,11, 5,11,10,11, 0, 3,-1,-1,-1,12),
int[]( 5, 4, 8, 5, 8,10,10, 8,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 7, 8, 5, 7, 9,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 9, 3, 0, 9, 5, 3, 5, 7, 3,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 7, 8, 0, 1, 7, 1, 5, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 5, 3, 3, 5, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 9, 7, 8, 9, 5, 7,10, 1, 2,-1,-1,-1,-1,-1,-1, 9),
int[](10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3,-1,-1,-1,12),
int[]( 8, 0, 2, 8, 2, 5, 8, 5, 7,10, 5, 2,-1,-1,-1,12),
int[]( 2,10, 5, 2, 5, 3, 3, 5, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 7, 9, 5, 7, 8, 9, 3,11, 2,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7,11,-1,-1,-1,12),
int[]( 2, 3,11, 0, 1, 8, 1, 7, 8, 1, 5, 7,-1,-1,-1,12),
int[](11, 2, 1,11, 1, 7, 7, 1, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 5, 8, 8, 5, 7,10, 1, 3,10, 3,11,-1,-1,-1,12),
int[]( 5, 7, 0, 5, 0, 9, 7,11, 0, 1, 0,10,11,10, 0,15),
int[](11,10, 0,11, 0, 3,10, 5, 0, 8, 0, 7, 5, 7, 0,15),
int[](11,10, 5, 7,11, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[](10, 6, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 0, 8, 3, 5,10, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 9, 0, 1, 5,10, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 8, 3, 1, 9, 8, 5,10, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 6, 5, 2, 6, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 6, 5, 1, 2, 6, 3, 0, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 6, 5, 9, 0, 6, 0, 2, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8,-1,-1,-1,12),
int[]( 2, 3,11,10, 6, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[](11, 0, 8,11, 2, 0,10, 6, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 1, 9, 2, 3,11, 5,10, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 5,10, 6, 1, 9, 2, 9,11, 2, 9, 8,11,-1,-1,-1,12),
int[]( 6, 3,11, 6, 5, 3, 5, 1, 3,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 8,11, 0,11, 5, 0, 5, 1, 5,11, 6,-1,-1,-1,12),
int[]( 3,11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9,-1,-1,-1,12),
int[]( 6, 5, 9, 6, 9,11,11, 9, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 5,10, 6, 4, 7, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 3, 0, 4, 7, 3, 6, 5,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 9, 0, 5,10, 6, 8, 4, 7,-1,-1,-1,-1,-1,-1, 9),
int[](10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4,-1,-1,-1,12),
int[]( 6, 1, 2, 6, 5, 1, 4, 7, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7,-1,-1,-1,12),
int[]( 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6,-1,-1,-1,12),
int[]( 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9,15),
int[]( 3,11, 2, 7, 8, 4,10, 6, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 5,10, 6, 4, 7, 2, 4, 2, 0, 2, 7,11,-1,-1,-1,12),
int[]( 0, 1, 9, 4, 7, 8, 2, 3,11, 5,10, 6,-1,-1,-1,12),
int[]( 9, 2, 1, 9,11, 2, 9, 4,11, 7,11, 4, 5,10, 6,15),
int[]( 8, 4, 7, 3,11, 5, 3, 5, 1, 5,11, 6,-1,-1,-1,12),
int[]( 5, 1,11, 5,11, 6, 1, 0,11, 7,11, 4, 0, 4,11,15),
int[]( 0, 5, 9, 0, 6, 5, 0, 3, 6,11, 6, 3, 8, 4, 7,15),
int[]( 6, 5, 9, 6, 9,11, 4, 7, 9, 7,11, 9,-1,-1,-1,12),
int[](10, 4, 9, 6, 4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4,10, 6, 4, 9,10, 0, 8, 3,-1,-1,-1,-1,-1,-1, 9),
int[](10, 0, 1,10, 6, 0, 6, 4, 0,-1,-1,-1,-1,-1,-1, 9),
int[]( 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1,10,-1,-1,-1,12),
int[]( 1, 4, 9, 1, 2, 4, 2, 6, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4,-1,-1,-1,12),
int[]( 0, 2, 4, 4, 2, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 8, 3, 2, 8, 2, 4, 4, 2, 6,-1,-1,-1,-1,-1,-1, 9),
int[](10, 4, 9,10, 6, 4,11, 2, 3,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 8, 2, 2, 8,11, 4, 9,10, 4,10, 6,-1,-1,-1,12),
int[]( 3,11, 2, 0, 1, 6, 0, 6, 4, 6, 1,10,-1,-1,-1,12),
int[]( 6, 4, 1, 6, 1,10, 4, 8, 1, 2, 1,11, 8,11, 1,15),
int[]( 9, 6, 4, 9, 3, 6, 9, 1, 3,11, 6, 3,-1,-1,-1,12),
int[]( 8,11, 1, 8, 1, 0,11, 6, 1, 9, 1, 4, 6, 4, 1,15),
int[]( 3,11, 6, 3, 6, 0, 0, 6, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 6, 4, 8,11, 6, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 7,10, 6, 7, 8,10, 8, 9,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 7, 3, 0,10, 7, 0, 9,10, 6, 7,10,-1,-1,-1,12),
int[](10, 6, 7, 1,10, 7, 1, 7, 8, 1, 8, 0,-1,-1,-1,12),
int[](10, 6, 7,10, 7, 1, 1, 7, 3,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7,-1,-1,-1,12),
int[]( 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9,15),
int[]( 7, 8, 0, 7, 0, 6, 6, 0, 2,-1,-1,-1,-1,-1,-1, 9),
int[]( 7, 3, 2, 6, 7, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 2, 3,11,10, 6, 8,10, 8, 9, 8, 6, 7,-1,-1,-1,12),
int[]( 2, 0, 7, 2, 7,11, 0, 9, 7, 6, 7,10, 9,10, 7,15),
int[]( 1, 8, 0, 1, 7, 8, 1,10, 7, 6, 7,10, 2, 3,11,15),
int[](11, 2, 1,11, 1, 7,10, 6, 1, 6, 7, 1,-1,-1,-1,12),
int[]( 8, 9, 6, 8, 6, 7, 9, 1, 6,11, 6, 3, 1, 3, 6,15),
int[]( 0, 9, 1,11, 6, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 7, 8, 0, 7, 0, 6, 3,11, 0,11, 6, 0,-1,-1,-1,12),
int[]( 7,11, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 7, 6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 3, 0, 8,11, 7, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 1, 9,11, 7, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 8, 1, 9, 8, 3, 1,11, 7, 6,-1,-1,-1,-1,-1,-1, 9),
int[](10, 1, 2, 6,11, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 2,10, 3, 0, 8, 6,11, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 2, 9, 0, 2,10, 9, 6,11, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 6,11, 7, 2,10, 3,10, 8, 3,10, 9, 8,-1,-1,-1,12),
int[]( 7, 2, 3, 6, 2, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 7, 0, 8, 7, 6, 0, 6, 2, 0,-1,-1,-1,-1,-1,-1, 9),
int[]( 2, 7, 6, 2, 3, 7, 0, 1, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6,-1,-1,-1,12),
int[](10, 7, 6,10, 1, 7, 1, 3, 7,-1,-1,-1,-1,-1,-1, 9),
int[](10, 7, 6, 1, 7,10, 1, 8, 7, 1, 0, 8,-1,-1,-1,12),
int[]( 0, 3, 7, 0, 7,10, 0,10, 9, 6,10, 7,-1,-1,-1,12),
int[]( 7, 6,10, 7,10, 8, 8,10, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 6, 8, 4,11, 8, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 3, 6,11, 3, 0, 6, 0, 4, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 8, 6,11, 8, 4, 6, 9, 0, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 4, 6, 9, 6, 3, 9, 3, 1,11, 3, 6,-1,-1,-1,12),
int[]( 6, 8, 4, 6,11, 8, 2,10, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2,10, 3, 0,11, 0, 6,11, 0, 4, 6,-1,-1,-1,12),
int[]( 4,11, 8, 4, 6,11, 0, 2, 9, 2,10, 9,-1,-1,-1,12),
int[](10, 9, 3,10, 3, 2, 9, 4, 3,11, 3, 6, 4, 6, 3,15),
int[]( 8, 2, 3, 8, 4, 2, 4, 6, 2,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 4, 2, 4, 6, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8,-1,-1,-1,12),
int[]( 1, 9, 4, 1, 4, 2, 2, 4, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 8, 1, 3, 8, 6, 1, 8, 4, 6, 6,10, 1,-1,-1,-1,12),
int[](10, 1, 0,10, 0, 6, 6, 0, 4,-1,-1,-1,-1,-1,-1, 9),
int[]( 4, 6, 3, 4, 3, 8, 6,10, 3, 0, 3, 9,10, 9, 3,15),
int[](10, 9, 4, 6,10, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 9, 5, 7, 6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 8, 3, 4, 9, 5,11, 7, 6,-1,-1,-1,-1,-1,-1, 9),
int[]( 5, 0, 1, 5, 4, 0, 7, 6,11,-1,-1,-1,-1,-1,-1, 9),
int[](11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5,-1,-1,-1,12),
int[]( 9, 5, 4,10, 1, 2, 7, 6,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 6,11, 7, 1, 2,10, 0, 8, 3, 4, 9, 5,-1,-1,-1,12),
int[]( 7, 6,11, 5, 4,10, 4, 2,10, 4, 0, 2,-1,-1,-1,12),
int[]( 3, 4, 8, 3, 5, 4, 3, 2, 5,10, 5, 2,11, 7, 6,15),
int[]( 7, 2, 3, 7, 6, 2, 5, 4, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7,-1,-1,-1,12),
int[]( 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0,-1,-1,-1,12),
int[]( 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8,15),
int[]( 9, 5, 4,10, 1, 6, 1, 7, 6, 1, 3, 7,-1,-1,-1,12),
int[]( 1, 6,10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4,15),
int[]( 4, 0,10, 4,10, 5, 0, 3,10, 6,10, 7, 3, 7,10,15),
int[]( 7, 6,10, 7,10, 8, 5, 4,10, 4, 8,10,-1,-1,-1,12),
int[]( 6, 9, 5, 6,11, 9,11, 8, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 3, 6,11, 0, 6, 3, 0, 5, 6, 0, 9, 5,-1,-1,-1,12),
int[]( 0,11, 8, 0, 5,11, 0, 1, 5, 5, 6,11,-1,-1,-1,12),
int[]( 6,11, 3, 6, 3, 5, 5, 3, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 2,10, 9, 5,11, 9,11, 8,11, 5, 6,-1,-1,-1,12),
int[]( 0,11, 3, 0, 6,11, 0, 9, 6, 5, 6, 9, 1, 2,10,15),
int[](11, 8, 5,11, 5, 6, 8, 0, 5,10, 5, 2, 0, 2, 5,15),
int[]( 6,11, 3, 6, 3, 5, 2,10, 3,10, 5, 3,-1,-1,-1,12),
int[]( 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2,-1,-1,-1,12),
int[]( 9, 5, 6, 9, 6, 0, 0, 6, 2,-1,-1,-1,-1,-1,-1, 9),
int[]( 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8,15),
int[]( 1, 5, 6, 2, 1, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 3, 6, 1, 6,10, 3, 8, 6, 5, 6, 9, 8, 9, 6,15),
int[](10, 1, 0,10, 0, 6, 9, 5, 0, 5, 6, 0,-1,-1,-1,12),
int[]( 0, 3, 8, 5, 6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[](10, 5, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[](11, 5,10, 7, 5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[](11, 5,10,11, 7, 5, 8, 3, 0,-1,-1,-1,-1,-1,-1, 9),
int[]( 5,11, 7, 5,10,11, 1, 9, 0,-1,-1,-1,-1,-1,-1, 9),
int[](10, 7, 5,10,11, 7, 9, 8, 1, 8, 3, 1,-1,-1,-1,12),
int[](11, 1, 2,11, 7, 1, 7, 5, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2,11,-1,-1,-1,12),
int[]( 9, 7, 5, 9, 2, 7, 9, 0, 2, 2,11, 7,-1,-1,-1,12),
int[]( 7, 5, 2, 7, 2,11, 5, 9, 2, 3, 2, 8, 9, 8, 2,15),
int[]( 2, 5,10, 2, 3, 5, 3, 7, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 8, 2, 0, 8, 5, 2, 8, 7, 5,10, 2, 5,-1,-1,-1,12),
int[]( 9, 0, 1, 5,10, 3, 5, 3, 7, 3,10, 2,-1,-1,-1,12),
int[]( 9, 8, 2, 9, 2, 1, 8, 7, 2,10, 2, 5, 7, 5, 2,15),
int[]( 1, 3, 5, 3, 7, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 8, 7, 0, 7, 1, 1, 7, 5,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 0, 3, 9, 3, 5, 5, 3, 7,-1,-1,-1,-1,-1,-1, 9),
int[]( 9, 8, 7, 5, 9, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 5, 8, 4, 5,10, 8,10,11, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 5, 0, 4, 5,11, 0, 5,10,11,11, 3, 0,-1,-1,-1,12),
int[]( 0, 1, 9, 8, 4,10, 8,10,11,10, 4, 5,-1,-1,-1,12),
int[](10,11, 4,10, 4, 5,11, 3, 4, 9, 4, 1, 3, 1, 4,15),
int[]( 2, 5, 1, 2, 8, 5, 2,11, 8, 4, 5, 8,-1,-1,-1,12),
int[]( 0, 4,11, 0,11, 3, 4, 5,11, 2,11, 1, 5, 1,11,15),
int[]( 0, 2, 5, 0, 5, 9, 2,11, 5, 4, 5, 8,11, 8, 5,15),
int[]( 9, 4, 5, 2,11, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 2, 5,10, 3, 5, 2, 3, 4, 5, 3, 8, 4,-1,-1,-1,12),
int[]( 5,10, 2, 5, 2, 4, 4, 2, 0,-1,-1,-1,-1,-1,-1, 9),
int[]( 3,10, 2, 3, 5,10, 3, 8, 5, 4, 5, 8, 0, 1, 9,15),
int[]( 5,10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2,-1,-1,-1,12),
int[]( 8, 4, 5, 8, 5, 3, 3, 5, 1,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 4, 5, 1, 0, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5,-1,-1,-1,12),
int[]( 9, 4, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 4,11, 7, 4, 9,11, 9,10,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 8, 3, 4, 9, 7, 9,11, 7, 9,10,11,-1,-1,-1,12),
int[]( 1,10,11, 1,11, 4, 1, 4, 0, 7, 4,11,-1,-1,-1,12),
int[]( 3, 1, 4, 3, 4, 8, 1,10, 4, 7, 4,11,10,11, 4,15),
int[]( 4,11, 7, 9,11, 4, 9, 2,11, 9, 1, 2,-1,-1,-1,12),
int[]( 9, 7, 4, 9,11, 7, 9, 1,11, 2,11, 1, 0, 8, 3,15),
int[](11, 7, 4,11, 4, 2, 2, 4, 0,-1,-1,-1,-1,-1,-1, 9),
int[](11, 7, 4,11, 4, 2, 8, 3, 4, 3, 2, 4,-1,-1,-1,12),
int[]( 2, 9,10, 2, 7, 9, 2, 3, 7, 7, 4, 9,-1,-1,-1,12),
int[]( 9,10, 7, 9, 7, 4,10, 2, 7, 8, 7, 0, 2, 0, 7,15),
int[]( 3, 7,10, 3,10, 2, 7, 4,10, 1,10, 0, 4, 0,10,15),
int[]( 1,10, 2, 8, 7, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 9, 1, 4, 1, 7, 7, 1, 3,-1,-1,-1,-1,-1,-1, 9),
int[]( 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1,-1,-1,-1,12),
int[]( 4, 0, 3, 7, 4, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 4, 8, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 9,10, 8,10,11, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 3, 0, 9, 3, 9,11,11, 9,10,-1,-1,-1,-1,-1,-1, 9),
int[]( 0, 1,10, 0,10, 8, 8,10,11,-1,-1,-1,-1,-1,-1, 9),
int[]( 3, 1,10,11, 3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 1, 2,11, 1,11, 9, 9,11, 8,-1,-1,-1,-1,-1,-1, 9),
int[]( 3, 0, 9, 3, 9,11, 1, 2, 9, 2,11, 9,-1,-1,-1,12),
int[]( 0, 2,11, 8, 0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 3, 2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 2, 3, 8, 2, 8,10,10, 8, 9,-1,-1,-1,-1,-1,-1, 9),
int[]( 9,10, 2, 0, 9, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 2, 3, 8, 2, 8,10, 0, 1, 8, 1,10, 8,-1,-1,-1,12),
int[]( 1,10, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 1, 3, 8, 9, 1, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6),
int[]( 0, 9, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[]( 0, 3, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3),
int[](-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0)
);

#define ISO 0.5

float findISO(in float d1, in float d2)
{
	return clamp((ISO - d1) / (d2 - d1), 0.0, 1.0);
}

uint SNORM_2_UINT(vec3 v)
{
	v = v * 0.5 + 0.5;
	v = clamp(v, 0.0, 1.0);
	return (uint(255 * v.x) & 0xFF) | ((uint(255 * v.y) & 0xFF) << 8) | ((uint(255 * v.z) & 0xFF) << 16);
}

uvec2 GetVertIDXAndFlag(in ivec3 pos)
{
	uint idxMVal = imageLoad(indexMap, pos).r;
	return uvec2(idxMVal >> 3, idxMVal & 7);
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	if(gl_GlobalInvocationID.x >= cellCount) return;

	uvec2 cellInfo = cells[gl_GlobalInvocationID.x];
	uint cubeFlag = cellInfo.x >> 24;
	ivec3 pos = ivec3(cellInfo.x & 0xFF, (cellInfo.x >> 8) & 0xFF, (cellInfo.x >> 16) & 0xFF);
	ivec3 colorPos = pos + ivec3(viewOffset);

	#define L(p) imageLoad(colorMap, colorPos + (p)).a

	float D[] = float[]
	(
		imageLoad(colorMap, colorPos).a,//0
		L(ivec3(1,0,0)),//1
		L(ivec3(0,1,0)),//2
		L(ivec3(0,0,1)),//3
		L(ivec3(-1,0,0)),//4
		L(ivec3(0,-1,0)),//5
		L(ivec3(0,0,-1)),//6

		L(ivec3(2,0,0)),//7
		L(ivec3(0,2,0)),//8
		L(ivec3(0,0,2)),//9

		L(ivec3(0,1,1)),//10
		L(ivec3(0,-1,1)),//11
		L(ivec3(0,1,-1)),//12

		L(ivec3(1,0,1)),//13
		L(ivec3(-1,0,1)),//14
		L(ivec3(1,0,-1)),//15

		L(ivec3(1,1,0)),//16
		L(ivec3(1,-1,0)),//17
		L(ivec3(-1,1,0))//18
	);
	uint idxMVal = imageLoad(indexMap, pos).r;
	uint vertOffset = idxMVal >> 3;
	uint cornerFlag = idxMVal & 7;

	//Generate verts
	uint o = 0;
	Vertex v;
	float t;
	vec3 n;
	if((cornerFlag & 1) != 0)//Z
	{
		t = findISO(D[0], D[3]);
		v.pos = pos + vec3(0.0, 0.0, t);
		n = vec3(mix(D[1], D[13], t) - mix(D[4], D[14], t),
		mix(D[2], D[10], t) - mix(D[5], D[11], t),
		mix(D[3], D[9], t) - mix(D[6], D[0], t));
		n /= max(max(abs(n.x), abs(n.y)), abs(n.z));
		v.nrm_idx = SNORM_2_UINT(n);
		verts[vertOffset] = v;
		o++;
	}
	if((cornerFlag & 2) != 0)//X
	{
		t = findISO(D[0], D[1]);
		v.pos = pos + vec3(t, 0.0, 0.0);
		n = vec3(mix(D[1], D[7], t) - mix(D[4], D[0], t),
		mix(D[2], D[16], t) - mix(D[5], D[17], t),
		mix(D[3], D[13], t) - mix(D[6], D[15], t));
		n /= max(max(abs(n.x), abs(n.y)), abs(n.z));
		v.nrm_idx = SNORM_2_UINT(n);
		verts[vertOffset + o] = v;
		o++;
	}
	if((cornerFlag & 4) != 0)//Y
	{
		t = findISO(D[0], D[2]);
		v.pos = pos + vec3(0.0, t, 0.0);
		n = vec3(mix(D[1], D[16], t) - mix(D[4], D[18], t),
		mix(D[2], D[8], t) - mix(D[5], D[0], t),
		mix(D[3], D[10], t) - mix(D[6], D[12], t));
		n /= max(max(abs(n.x), abs(n.y)), abs(n.z));
		v.nrm_idx = SNORM_2_UINT(n);
		verts[vertOffset + o] = v;
	}

	if(cellInfo.y != 0xFFFFFFFF)//Generate tris
	{
		uvec2[] corners = uvec2[7](uvec2(vertOffset, cornerFlag),
		GetVertIDXAndFlag(pos + ivec3(0,0,1)),
		GetVertIDXAndFlag(pos + ivec3(1,0,0)),
		GetVertIDXAndFlag(pos + ivec3(0,1,0)),
		GetVertIDXAndFlag(pos + ivec3(0,1,1)),
		GetVertIDXAndFlag(pos + ivec3(1,1,0)),
		GetVertIDXAndFlag(pos + ivec3(1,0,1)));

		int ttable[16] = triTable[cubeFlag];
		int tcount = ttable[15];
		uvec2 map;
		uvec2 vf;
		
		for(int i = 0;i < tcount;i++)
		{
			map = edgeMap[ttable[i]];
			vf = corners[map.x];
			idxs[cellInfo.y + i] = vf.x + cornerIMap[vf.y][map.y];
		}
	}
}

/*

float sample_dencity(in vec3 pos)
{
	ivec3 f =ivec3(floor(pos));
	vec3 d = pos - f;
	float x0 = mix(imageLoad(colorMap, f).a, imageLoad(colorMap, f + ivec3(1,0,0)).a, d.x);
	float x1 = mix(imageLoad(colorMap, f + ivec3(0,1,0)).a, imageLoad(colorMap, f + ivec3(1,1,0)).a, d.x);
	float x2 = mix(imageLoad(colorMap, f + ivec3(0,0,1)).a, imageLoad(colorMap, f + ivec3(1,0,1)).a, d.x);
	float x3 = mix(imageLoad(colorMap, f + ivec3(0,1,1)).a, imageLoad(colorMap, f + ivec3(1,1,1)).a, d.x);
	float y0 = mix(x0, x1, d.y);
	float y1 = mix(x2, x3, d.y);
	return mix(y0, y1, d.z);
}

vec3 compute_normal(in vec3 pos)
{
	const float h = 1.0f;
	vec3 n = vec3(sample_dencity(pos + vec3(h,0,0)) - sample_dencity(pos - vec3(h,0,0)),
	sample_dencity(pos + vec3(0,h,0)) - sample_dencity(pos - vec3(0,h,0)),
	sample_dencity(pos + vec3(0,0,h)) - sample_dencity(pos - vec3(0,0,h)));

	n /= max(max(abs(n.x), abs(n.y)), abs(n.z));
	return n;
}

ivec3 dirAxis[3] = ivec3[](
	ivec3(1,0,0),
	ivec3(0,1,0),
	ivec3(0,0,1));

ivec3 dirAdj[6] = ivec3[](
	ivec3(0,0,1),
	ivec3(0,0,1),
	ivec3(0,1,0),
	ivec3(0,1,0),
	ivec3(1,0,0),
	ivec3(1,0,0));

vec3 compute_normal(in ivec3 corner, in uint dir, in float t, in float d1, in float d2)
{
	ivec3 axis = dirAxis[dir];
	ivec3 adjX = dirAdj[dir];
	ivec3 adjY = dirAdj[dir + 3];
	
	#define l(p) imageLoad(colorMap, corner + (p)).a

	vec3 n = axis * (mix(d2, l(axis + axis), t) - mix(l(-axis), d1, t)) +
		adjX * (mix(l(adjX), l(adjX + axis), t) - mix(l(-adjX), l(-adjX + axis), t)) +
		adjY * (mix(l(adjY), l(adjY + axis), t) - mix(l(-adjY), l(-adjY + axis), t));

	n /= max(max(abs(n.x), abs(n.y)), abs(n.z));
	return n;
}
*/